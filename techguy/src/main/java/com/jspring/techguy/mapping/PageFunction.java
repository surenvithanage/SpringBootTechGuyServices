package com.jspring.techguy.mapping;
// Generated Jan 3, 2019 9:27:06 AM by Hibernate Tools 4.3.1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * PageFunction generated by hbm2java
 */
@Entity
@Table(name = "page_function", catalog = "techguy")
public class PageFunction implements java.io.Serializable {

	/**
	* 
	*/
	private static final long serialVersionUID = -7610608759796971482L;
	private Integer pageFuncId;
	private Function function;
	private Page page;
	private Set<Privilege> privileges = new HashSet<Privilege>(0);

	public PageFunction() {
	}

	public PageFunction(Function function, Page page) {
		this.function = function;
		this.page = page;
	}

	public PageFunction(Function function, Page page, Set<Privilege> privileges) {
		this.function = function;
		this.page = page;
		this.privileges = privileges;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "page_func_id", unique = true, nullable = false)
	public Integer getPageFuncId() {
		return this.pageFuncId;
	}

	public void setPageFuncId(Integer pageFuncId) {
		this.pageFuncId = pageFuncId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "function_function_id", nullable = false)
	@JsonManagedReference
	public Function getFunction() {
		return this.function;
	}

	public void setFunction(Function function) {
		this.function = function;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "page_page_id", nullable = false)
	@JsonManagedReference
	public Page getPage() {
		return this.page;
	}

	public void setPage(Page page) {
		this.page = page;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pageFunction")
	@JsonBackReference
	public Set<Privilege> getPrivileges() {
		return this.privileges;
	}

	public void setPrivileges(Set<Privilege> privileges) {
		this.privileges = privileges;
	}

}
